{"ast":null,"code":"// src/utils.js\nexport const handleEdit = (index, data, setNewData, setEditIndex) => {\n  setNewData(data[index]);\n  setEditIndex(index);\n};\nexport const handleDelete = (index, data, setData, setNewData, setEditIndex) => {\n  const newData = data.filter((_, i) => i !== index);\n  setData(newData);\n  if (setEditIndex === index) {\n    setNewData({\n      name: '',\n      amount: '',\n      date: '',\n      category: ''\n    });\n    setEditIndex(null);\n  }\n};\nexport const handleAddOrUpdate = (newData, setNewData, data, setData, editIndex, setEditIndex) => {\n  if (newData.name && newData.amount && newData.date && newData.category) {\n    const parsedAmount = parseFloat(newData.amount).toFixed(2);\n    if (isNaN(parsedAmount)) {\n      alert('Amount must be a number');\n      return;\n    }\n    if (editIndex !== null) {\n      const updatedData = data.map((item, index) => index === editIndex ? {\n        ...newData,\n        amount: parseFloat(parsedAmount)\n      } : item);\n      setData(updatedData);\n      setEditIndex(null);\n    } else {\n      setData([...data, {\n        ...newData,\n        amount: parseFloat(parsedAmount)\n      }]);\n    }\n    setNewData({\n      name: '',\n      amount: '',\n      date: '',\n      category: ''\n    });\n  } else {\n    alert('Please fill in all fields');\n  }\n};\nexport const handleFilterChange = (e, filterType, setMonthFilter, setCategoryFilter) => {\n  if (filterType === 'month') {\n    setMonthFilter(e.target.value);\n  } else if (filterType === 'category') {\n    setCategoryFilter(e.target.value);\n  }\n};\nexport const getFilteredData = (data, monthFilter, categoryFilter) => {\n  return data.filter(item => {\n    var _item$date;\n    const monthMatches = monthFilter ? (_item$date = item.date) === null || _item$date === void 0 ? void 0 : _item$date.startsWith(monthFilter) : true;\n    const categoryMatches = categoryFilter ? item.category === categoryFilter : true;\n    return monthMatches && categoryMatches;\n  });\n};\nexport const getTotalAmount = data => {\n  return data.reduce((total, item) => total + item.amount, 0).toFixed(2);\n};\nexport const getUniqueValues = (data, key) => {\n  return [...new Set(data.map(item => item[key]))];\n};\nexport const getUniqueMonths = data => {\n  return [...new Set(data.map(item => {\n    var _item$date2;\n    return (_item$date2 = item.date) === null || _item$date2 === void 0 ? void 0 : _item$date2.slice(0, 7);\n  }).filter(Boolean))];\n};\nexport const getUniqueCategories = data => {\n  return [...new Set(data.map(item => item.category))];\n};\nexport const aggregateDebtData = (incomeData, extraExpensesData) => {\n  const aggregatedData = {};\n  incomeData.forEach(item => {\n    if (item.category === 'Debts') {\n      if (!aggregatedData[item.name]) {\n        aggregatedData[item.name] = {\n          name: item.name,\n          took: 0,\n          gave: 0,\n          open: 0\n        };\n      }\n      aggregatedData[item.name].took += item.amount;\n      aggregatedData[item.name].open += item.amount;\n    }\n  });\n  extraExpensesData.forEach(item => {\n    if (item.category === 'Debts') {\n      if (!aggregatedData[item.name]) {\n        aggregatedData[item.name] = {\n          name: item.name,\n          took: 0,\n          gave: 0,\n          open: 0\n        };\n      }\n      aggregatedData[item.name].gave += item.amount;\n      aggregatedData[item.name].open -= item.amount;\n    }\n  });\n  return Object.values(aggregatedData);\n};\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst getMonthNameFromDate = dateString => {\n  const date = new Date(dateString);\n  return `${monthNames[date.getMonth()]} ${date.getFullYear()}`;\n};\nconst sortDataByDate = data => {\n  return data.sort((a, b) => new Date(a.date) - new Date(b.date));\n};\nexport const aggregateMonthlyData = (incomeData, extraExpensesData, monthlyExpensesData) => {\n  // Sort the data by date\n  const sortedIncomeData = sortDataByDate(incomeData);\n  const sortedExtraExpensesData = sortDataByDate(extraExpensesData);\n  const monthlyData = {};\n\n  // Initialize all months\n  sortedIncomeData.forEach(item => {\n    const monthName = getMonthNameFromDate(item.date);\n    if (!monthlyData[monthName]) {\n      monthlyData[monthName] = {\n        income: 0,\n        expenses: 0,\n        savings: 0,\n        credit: 0,\n        actualBalance: 0\n      };\n    }\n  });\n  sortedExtraExpensesData.forEach(item => {\n    const monthName = getMonthNameFromDate(item.date);\n    if (!monthlyData[monthName]) {\n      monthlyData[monthName] = {\n        income: 0,\n        expenses: 0,\n        savings: 0,\n        credit: 0,\n        actualBalance: 0\n      };\n    }\n  });\n\n  // Add monthly expenses to each month\n  const totalMonthlyExpenses = monthlyExpensesData.reduce((total, item) => total + item.amount, 0);\n  Object.keys(monthlyData).forEach(month => {\n    monthlyData[month].expenses += totalMonthlyExpenses;\n  });\n\n  // Aggregate income and extra expenses\n  const allData = [...sortedIncomeData.map(item => ({\n    ...item,\n    type: 'income'\n  })), ...sortedExtraExpensesData.map(item => ({\n    ...item,\n    type: 'extraExpense'\n  }))];\n  allData.forEach(item => {\n    const monthName = getMonthNameFromDate(item.date);\n    if (item.type === 'income') {\n      monthlyData[monthName].income += item.amount;\n    } else if (item.type === 'extraExpense') {\n      monthlyData[monthName].expenses += item.amount;\n    }\n    monthlyData[monthName].savings = monthlyData[monthName].income - monthlyData[monthName].expenses;\n  });\n\n  // Calculate credit and actual balance for each month\n  const initialToPay = 3510;\n  let previousToPay = initialToPay;\n  Object.keys(monthlyData).sort((a, b) => new Date(a) - new Date(b)).forEach((month, index) => {\n    const savedValue = Math.round(monthlyData[month].savings);\n    const toPay = index === 0 ? initialToPay : previousToPay - savedValue;\n    const canUse = 8500 - toPay;\n    monthlyData[month].credit = toPay;\n    monthlyData[month].actualBalance = canUse;\n    previousToPay = toPay;\n  });\n  return monthlyData;\n};","map":{"version":3,"names":["handleEdit","index","data","setNewData","setEditIndex","handleDelete","setData","newData","filter","_","i","name","amount","date","category","handleAddOrUpdate","editIndex","parsedAmount","parseFloat","toFixed","isNaN","alert","updatedData","map","item","handleFilterChange","e","filterType","setMonthFilter","setCategoryFilter","target","value","getFilteredData","monthFilter","categoryFilter","_item$date","monthMatches","startsWith","categoryMatches","getTotalAmount","reduce","total","getUniqueValues","key","Set","getUniqueMonths","_item$date2","slice","Boolean","getUniqueCategories","aggregateDebtData","incomeData","extraExpensesData","aggregatedData","forEach","took","gave","open","Object","values","monthNames","getMonthNameFromDate","dateString","Date","getMonth","getFullYear","sortDataByDate","sort","a","b","aggregateMonthlyData","monthlyExpensesData","sortedIncomeData","sortedExtraExpensesData","monthlyData","monthName","income","expenses","savings","credit","actualBalance","totalMonthlyExpenses","keys","month","allData","type","initialToPay","previousToPay","savedValue","Math","round","toPay","canUse"],"sources":["/Users/houcinehassine/Library/Mobile Documents/com~apple~CloudDocs/Downloads/MyApp/invoice-map/src/Help/utils.js"],"sourcesContent":["// src/utils.js\nexport const handleEdit = (index, data, setNewData, setEditIndex) => {\n    setNewData(data[index]);\n    setEditIndex(index);\n  };\n  \n  export const handleDelete = (index, data, setData, setNewData, setEditIndex) => {\n    const newData = data.filter((_, i) => i !== index);\n    setData(newData);\n    if (setEditIndex === index) {\n      setNewData({ name: '', amount: '', date: '', category: '' });\n      setEditIndex(null);\n    }\n  };\n  \n  export const handleAddOrUpdate = (newData, setNewData, data, setData, editIndex, setEditIndex) => {\n    if (newData.name && newData.amount && newData.date && newData.category) {\n      const parsedAmount = parseFloat(newData.amount).toFixed(2);\n      if (isNaN(parsedAmount)) {\n        alert('Amount must be a number');\n        return;\n      }\n      if (editIndex !== null) {\n        const updatedData = data.map((item, index) =>\n          index === editIndex ? { ...newData, amount: parseFloat(parsedAmount) } : item\n        );\n        setData(updatedData);\n        setEditIndex(null);\n      } else {\n        setData([...data, { ...newData, amount: parseFloat(parsedAmount) }]);\n      }\n      setNewData({ name: '', amount: '', date: '', category: '' });\n    } else {\n      alert('Please fill in all fields');\n    }\n  };\n  \n  export const handleFilterChange = (e, filterType, setMonthFilter, setCategoryFilter) => {\n    if (filterType === 'month') {\n      setMonthFilter(e.target.value);\n    } else if (filterType === 'category') {\n      setCategoryFilter(e.target.value);\n    }\n  };\n  \n  export const getFilteredData = (data, monthFilter, categoryFilter) => {\n    return data.filter((item) => {\n      const monthMatches = monthFilter ? item.date?.startsWith(monthFilter) : true;\n      const categoryMatches = categoryFilter ? item.category === categoryFilter : true;\n      return monthMatches && categoryMatches;\n    });\n  };\n  \n  export const getTotalAmount = (data) => {\n    return data.reduce((total, item) => total + item.amount, 0).toFixed(2);\n  };\n  \n  export const getUniqueValues = (data, key) => {\n    return [...new Set(data.map((item) => item[key]))];\n  };\n  \n  export const getUniqueMonths = (data) => {\n    return [...new Set(data.map((item) => item.date?.slice(0, 7)).filter(Boolean))];\n  };\n  \n  export const getUniqueCategories = (data) => {\n    return [...new Set(data.map((item) => item.category))];\n  };\n  \n  export const aggregateDebtData = (incomeData, extraExpensesData) => {\n    const aggregatedData = {};\n  \n    incomeData.forEach(item => {\n      if (item.category === 'Debts') {\n        if (!aggregatedData[item.name]) {\n          aggregatedData[item.name] = { name: item.name, took: 0, gave: 0, open: 0 };\n        }\n        aggregatedData[item.name].took += item.amount;\n        aggregatedData[item.name].open += item.amount;\n      }\n    });\n  \n    extraExpensesData.forEach(item => {\n      if (item.category === 'Debts') {\n        if (!aggregatedData[item.name]) {\n          aggregatedData[item.name] = { name: item.name, took: 0, gave: 0, open: 0 };\n        }\n        aggregatedData[item.name].gave += item.amount;\n        aggregatedData[item.name].open -= item.amount;\n      }\n    });\n  \n    return Object.values(aggregatedData);\n  };\n  \n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n  \n  const getMonthNameFromDate = (dateString) => {\n    const date = new Date(dateString);\n    return `${monthNames[date.getMonth()]} ${date.getFullYear()}`;\n  };\n  \n  const sortDataByDate = (data) => {\n    return data.sort((a, b) => new Date(a.date) - new Date(b.date));\n  };\n  \n  export const aggregateMonthlyData = (incomeData, extraExpensesData, monthlyExpensesData) => {\n    // Sort the data by date\n    const sortedIncomeData = sortDataByDate(incomeData);\n    const sortedExtraExpensesData = sortDataByDate(extraExpensesData);\n  \n    const monthlyData = {};\n  \n    // Initialize all months\n    sortedIncomeData.forEach(item => {\n      const monthName = getMonthNameFromDate(item.date);\n      if (!monthlyData[monthName]) {\n        monthlyData[monthName] = {\n          income: 0,\n          expenses: 0,\n          savings: 0,\n          credit: 0,\n          actualBalance: 0\n        };\n      }\n    });\n  \n    sortedExtraExpensesData.forEach(item => {\n      const monthName = getMonthNameFromDate(item.date);\n      if (!monthlyData[monthName]) {\n        monthlyData[monthName] = {\n          income: 0,\n          expenses: 0,\n          savings: 0,\n          credit: 0,\n          actualBalance: 0\n        };\n      }\n    });\n  \n    // Add monthly expenses to each month\n    const totalMonthlyExpenses = monthlyExpensesData.reduce((total, item) => total + item.amount, 0);\n    Object.keys(monthlyData).forEach(month => {\n      monthlyData[month].expenses += totalMonthlyExpenses;\n    });\n  \n    // Aggregate income and extra expenses\n    const allData = [\n      ...sortedIncomeData.map(item => ({ ...item, type: 'income' })),\n      ...sortedExtraExpensesData.map(item => ({ ...item, type: 'extraExpense' })),\n    ];\n  \n    allData.forEach(item => {\n      const monthName = getMonthNameFromDate(item.date);\n  \n      if (item.type === 'income') {\n        monthlyData[monthName].income += item.amount;\n      } else if (item.type === 'extraExpense') {\n        monthlyData[monthName].expenses += item.amount;\n      }\n  \n      monthlyData[monthName].savings = monthlyData[monthName].income - monthlyData[monthName].expenses;\n    });\n  \n    // Calculate credit and actual balance for each month\n    const initialToPay = 3510;\n    let previousToPay = initialToPay;\n  \n    Object.keys(monthlyData).sort((a, b) => new Date(a) - new Date(b)).forEach((month, index) => {\n      const savedValue = Math.round(monthlyData[month].savings);\n      const toPay = index === 0 ? initialToPay : previousToPay - savedValue;\n      const canUse = 8500 - toPay;\n  \n      monthlyData[month].credit = toPay;\n      monthlyData[month].actualBalance = canUse;\n  \n      previousToPay = toPay;\n    });\n  \n    return monthlyData;\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}