{"version":3,"file":"static/js/608.4fa30798.chunk.js","mappings":"6KAIA,MAwDA,EAxDsBA,KACpB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IAE/CG,EAAAA,EAAAA,YAAU,KAER,MAQMC,EAAwB,IARDC,EAAAA,EAC1BC,QAAOC,GAA0B,iBAAlBA,EAAKC,WACpBC,KAAIF,IAAI,IAAUA,EAAMC,SAAU,iBACTE,EAAAA,EACzBJ,QAAOC,GAA0B,iBAAlBA,EAAKC,WACpBC,KAAIF,IAAI,IAAUA,EAAMC,SAAU,cAIrCT,EAAiBK,GAGjB,MAAMO,EAAQP,EAAsBQ,QAAO,CAACC,EAAKN,IAASM,EAAMN,EAAKO,QAAQ,GAC7EZ,EAAeS,EAAM,GACpB,IAGH,MAAMI,EAAsBC,MAAMf,GAAwC,OAAzBA,EAAYgB,QAAQ,GAErE,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACsB,IAAzBrB,EAAcuB,SAAgBD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BACjCrB,EAAcuB,OAAS,IACtBH,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGrB,EAAcW,KAAI,CAACF,EAAMe,KACxBJ,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKZ,EAAKgB,QACVL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAKZ,EAAKO,OAAOG,QAAQ,GAAG,YAC5BG,EAAAA,EAAAA,KAAA,MAAAD,SAAK,IAAIK,KAAKjB,EAAKkB,MAAMC,wBACzBN,EAAAA,EAAAA,KAAA,MAAAD,SAAKZ,EAAKC,aAJHc,WAUjBJ,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,iBAAeJ,EAAmB,aAClC,C","sources":["Page/Subscriptions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport monthlyExpensesData from '../data/monthlyExpensesData';\nimport extraExpensesData from '../data/extraExpensesData';\n\nconst Subscriptions = () => {\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n\n  useEffect(() => {\n    // Filter the data to get subscriptions\n    const monthlySubscriptions = monthlyExpensesData\n      .filter(item => item.category === 'Subscription')\n      .map(item => ({ ...item, category: 'Monthly' }));\n    const yearlySubscriptions = extraExpensesData\n      .filter(item => item.category === 'Subscription')\n      .map(item => ({ ...item, category: 'Yearly' }));\n    \n    // Combine the filtered data\n    const combinedSubscriptions = [...monthlySubscriptions, ...yearlySubscriptions];\n    setSubscriptions(combinedSubscriptions);\n\n    // Calculate total amount\n    const total = combinedSubscriptions.reduce((sum, item) => sum + item.amount, 0);\n    setTotalAmount(total);\n  }, []);\n\n  // Ensure totalAmount is a number and then use toFixed\n  const displayTotalAmount = !isNaN(totalAmount) ? totalAmount.toFixed(2) : '0.00';\n\n  return (\n    <div>\n      <h1>Subscriptions</h1>\n      {subscriptions.length === 0 && <p>No subscriptions found.</p>}\n      {subscriptions.length > 0 && (\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Amount</th>\n              <th>Date</th>\n              <th>Category</th>\n            </tr>\n          </thead>\n          <tbody>\n            {subscriptions.map((item, index) => (\n              <tr key={index}>\n                <td>{item.name}</td>\n                <td>{item.amount.toFixed(2)} Euro</td>\n                <td>{new Date(item.date).toLocaleDateString()}</td>\n                <td>{item.category}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      <h2>Total Amount: {displayTotalAmount} Euro</h2>\n    </div>\n  );\n};\n\nexport default Subscriptions;\n\n"],"names":["Subscriptions","subscriptions","setSubscriptions","useState","totalAmount","setTotalAmount","useEffect","combinedSubscriptions","monthlyExpensesData","filter","item","category","map","extraExpensesData","total","reduce","sum","amount","displayTotalAmount","isNaN","toFixed","_jsxs","children","_jsx","length","index","name","Date","date","toLocaleDateString"],"sourceRoot":""}