{"version":3,"file":"static/js/925.bb8c319b.chunk.js","mappings":"oKA+DA,QA5DA,WACE,MAAMA,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,IACxBC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KACR,GAAIC,OAAOC,KAAKR,GAAaS,OAAS,EAAG,CACvC,MAAMC,EAAe,KAGfC,EAAe,GAErBJ,OAAOC,KAAKR,GAAaY,MAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKF,GAAK,IAAIE,KAAKD,KAAIE,SAAQ,CAACC,EAAOC,KACjF,MAAMC,EAAaC,KAAKC,MAAMrB,EAAYiB,GAAOK,SAE3CC,EAAkB,IAAVL,EAAcR,EAAeC,EAAaO,EAAQ,GAAGK,MAAQJ,EACrEK,EAAS,KAAOD,EAChBE,EAASN,EAEfR,EAAae,KAAK,CAChBC,KAAMV,EACNM,MAAOA,EACPC,OAAQA,EACRC,OAAQA,GACR,IAGJrB,EAAQO,EACV,IACC,CAACX,IAEJ,MAQM4B,EARaC,EAACC,EAAOC,KACzB,MAAMC,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMrB,OAAQwB,GAAKF,EACrCC,EAAON,KAAKI,EAAMI,MAAMD,EAAGA,EAAIF,IAEjC,OAAOC,CAAM,EAGFH,CAAW1B,EAAM,GAE9B,OACEgC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACa,IAAhBR,EAAKnB,SAAgB4B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sBACxBR,EAAKU,KAAI,CAACC,EAAKC,KACdH,EAAAA,EAAAA,KAAA,OAAoBI,MAAO,CAAEC,QAAS,OAAQC,IAAK,OAAQC,aAAc,QAASR,SAC/EG,EAAID,KAAI,CAACO,EAAM3B,KACdiB,EAAAA,EAAAA,MAAA,OAAiBM,MAAO,CAAEK,OAAQ,iBAAkBC,QAAS,OAAQC,aAAc,MAAOC,MAAO,SAAUb,SAAA,EACzGC,EAAAA,EAAAA,KAAA,MAAII,MAAO,CAAES,UAAW,UAAWd,SAAES,EAAKlB,QAC1CQ,EAAAA,EAAAA,MAAA,KAAAC,SAAA,EAAGC,EAAAA,EAAAA,KAAA,QAAMI,MAAO,CAAEU,WAAY,QAASf,SAAC,kBAAoB,IAAES,EAAKtB,MAAM,YACzEY,EAAAA,EAAAA,MAAA,KAAAC,SAAA,EAAGC,EAAAA,EAAAA,KAAA,QAAMI,MAAO,CAAEU,WAAY,QAASf,SAAC,kBAAqBS,EAAKrB,OAAO,YACzEW,EAAAA,EAAAA,MAAA,KAAAC,SAAA,EAAGC,EAAAA,EAAAA,KAAA,QAAMI,MAAO,CAAEU,WAAY,QAASf,SAAC,kBAAoB,IAAES,EAAKpB,OAAO,aAJlEP,MAFJsB,OAalB,EClDA,QARA,WACE,OACEH,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACe,EAAM,KAGb,C","sources":["Page/TFBank.js","Page/Credit.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { MonthlyDataContext } from '../Help/MonthlyDataContext';\n\nfunction TFBank() {\n  const monthlyData = useContext(MonthlyDataContext);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (Object.keys(monthlyData).length > 0) {\n      const initialToPay = 3510;\n      const initialCanUse = 8500 - initialToPay;\n\n      const computedData = [];\n\n      Object.keys(monthlyData).sort((a, b) => new Date(a) - new Date(b)).forEach((month, index) => {\n        const savedValue = Math.round(monthlyData[month].savings);\n\n        const toPay = index === 0 ? initialToPay : computedData[index - 1].toPay - savedValue;\n        const canUse = 8500 - toPay;\n        const income = savedValue;\n\n        computedData.push({\n          name: month,\n          toPay: toPay,\n          canUse: canUse,\n          income: income\n        });\n      });\n\n      setData(computedData);\n    }\n  }, [monthlyData]);\n\n  const chunkArray = (array, chunkSize) => {\n    const result = [];\n    for (let i = 0; i < array.length; i += chunkSize) {\n      result.push(array.slice(i, i + chunkSize));\n    }\n    return result;\n  };\n\n  const rows = chunkArray(data, 3);\n\n  return (\n    <div>\n      <h1>TF Bank Overview</h1>\n      {rows.length === 0 && <p>No data available</p>}\n      {rows.map((row, rowIndex) => (\n        <div key={rowIndex} style={{ display: 'flex', gap: '16px', marginBottom: '16px' }}>\n          {row.map((item, index) => (\n            <div key={index} style={{ border: '1px solid #ccc', padding: '16px', borderRadius: '8px', width: '300px' }}>\n              <h3 style={{ textAlign: 'center' }}>{item.name}</h3>\n              <p><span style={{ fontWeight: 'bold' }}>To Pay:      </span> {item.toPay} Euro</p>\n              <p><span style={{ fontWeight: 'bold' }}>Can be Used: </span>{item.canUse} Euro</p>\n              <p><span style={{ fontWeight: 'bold' }}>Income:      </span> {item.income} Euro</p>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default TFBank;\n\n","import React from 'react';\nimport TFBank from './TFBank'; // Ensure this import is correct\n\nfunction Credit() {\n  return (\n    <div>\n      <TFBank />\n    </div>\n  );\n}\n\nexport default Credit;\n"],"names":["monthlyData","useContext","MonthlyDataContext","data","setData","useState","useEffect","Object","keys","length","initialToPay","computedData","sort","a","b","Date","forEach","month","index","savedValue","Math","round","savings","toPay","canUse","income","push","name","rows","chunkArray","array","chunkSize","result","i","slice","_jsxs","children","_jsx","map","row","rowIndex","style","display","gap","marginBottom","item","border","padding","borderRadius","width","textAlign","fontWeight","TFBank"],"sourceRoot":""}